from execution.base_tool import BaseTool, ToolResult


class HumanHelp(BaseTool):
    """
    此工具用户在解决用户提出的任务的过程中，需要人工干预时使用。
    在如下几个场景中，你可以调用这个工具：
    1. 当你需要用户提供额外的信息才能继续完成任务时，你可以调用这个工具（例如，用户需要你根据他的输入信息进行推断时）。
    2. 当你需要用户对电脑进行额外的操作后，才能继续完成任务时，你可以调用这个工具。
    3. 当你无法判断用户的任务是否需要人工干预时，你可以调用这个工具。
    工具的入参是：
    help_detail: 需要用户介入提供的额外信息或额外操作的描述。你需要根据用户的任务，提供一个明确的描述，让用户知道你需要什么信息或操作。
    工具的出参是：
    help_result: 返回需要用户介入帮助的描述。你需要根据用户的任务，提供一个明确的结果，让用户知道你需要什么信息或操作。
    """
    name: str = "human_help"
    description: str = """
    此工具用户在解决用户提出的任务的过程中，需要人工干预时使用。
    在如下几个场景中，你可以调用这个工具：
    1. 当你需要用户提供额外的信息才能继续完成任务时，你可以调用这个工具（例如，用户需要你根据他的输入信息进行推断时）。
    2. 当你需要用户对电脑进行额外的操作后，才能继续完成任务时，你可以调用这个工具。
    3. 当你无法判断用户的任务是否需要人工干预时，你可以调用这个工具。
    工具的入参是：
    help_detail: 需要用户介入提供的额外信息或额外操作的描述。你需要根据用户的任务，提供一个明确的描述，让用户知道你需要什么信息或操作。
    工具的出参是：
    help_result: 返回需要用户介入帮助的描述。你需要根据用户的任务，提供一个明确的结果，让用户知道你需要什么信息或操作。
    """
    parameters: dict = {
        "type": "object",
        "properties": {
            "help_detail": {
                "type": "string",
                "description": "需要用户介入提供的额外信息或额外操作的描述。你需要根据用户的任务，提供一个明确的描述，让用户知道你需要什么信息或操作。",
            }
        },
        "required": ["help_detail"],
    }

    def execute(self, help_result: str) -> str:
        """返回需要用户介入帮助的描述"""
        return ToolResult(output=f"需要用户介入帮助: {help_result}")
